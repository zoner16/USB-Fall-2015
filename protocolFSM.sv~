module protocolFSM
  (input bit clk, rst_b,
   input bit inTrans, outTrans,
   input bit [15:0] protocolMemPage,
   input bit crc_correct,
   output bit [3:0] pid, endp,
   output bit [6:0] addr);

   logic [7:0] 	    clk_count;
   logic [3:0] 	    timeout_count;
   logic [3:0] 	    corrupted_count;
   
   
   always_ff @(posedge clk, negedge rst_b) begin
      if (~rst_b) begin
	 state <= Hold;
	 timeout_count <= 0;
	 clk_count <= 0;
	 failure <= 0;
	 success <= 0;
	 corrupted_count <= 0;
      end
      else begin
	 case(state)
	   Hold: begin
	      clk_count <= 0;
	      failure <= 0;
	      success <= 0;
	      timeout_count <= 0;
	      corrupted_count <= 0;
	      if (in_trans) begin
		 pid = 4'b1001;
		 addr = 7'd5;
		 endp = 4'd4;
		 state <= InTrans;
	      end
	      else if (out_trans) begin
		 pid = 4'b0001;
		 addr = 7'd5;
		 endp = 4'd4;
		 state <= OutTrans;
	      end
	   end
	   InTrans: begin
	      if (corrupted_count == 4'd8) begin // corrupted max reached
		 state <= Hold;
		 failure <= 1;
	      end
	      else if (timeout_count == 4'd8) begin // timeout max reached
		 state <= Hold;
		 failure <= 1;
	      end
	      else if (data_ready && ~crc_correct) begin // corrupted data sent back
		 corrupted_count <= corrupted_count + 1;
		 clk_count <= 0;
		 pid <= 4'b1010;
	      end
	      else if (data_ready && crc_correct) begin //correct data sent back
		 state <= Hold;
		 success <= 1;
		 pid <= 4'b0010;
		 data_out <= data_in_device;
	      end 
	      else if (clk_count == 8'd255) begin //timeout reached
		 timeout_count <= timeout_count + 1'd1;
		 clk_count <= 0;
	      end
	      else 
		clk_count <= clk_count + 1'd1; //keep track of clk cycles
	   end // case: InTrans
	   OutTrans:
	     if 
	 endcase
      end
   end
   
   

endmodule: protocolFSM